name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy bandit isort
      
      - name: Check code formatting (black)
        run: |
          black --check --diff src tests examples scripts
          echo "âœ… Black formatting check passed"
        continue-on-error: false
      
      - name: Check import sorting (isort)
        run: |
          isort --check-only --diff src tests examples scripts
          echo "âœ… Import sorting check passed"
        continue-on-error: false
      
      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src tests --count --max-line-length=88 --statistics --exit-zero
          echo "âœ… Flake8 linting passed"
      
      - name: Type checking (mypy)
        run: |
          mypy src --ignore-missing-imports --no-strict-optional
          echo "âœ… Type checking passed"
        continue-on-error: true  # Allow failure for now
      
      - name: Security check (bandit)
        run: |
          bandit -r src -f screen
          echo "âœ… Security check passed"
        continue-on-error: true  # Allow failure for now

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --cov=src --cov-report=term-missing --cov-report=xml
      
      - name: Check test coverage
        run: |
          coverage report --fail-under=80
          echo "âœ… Coverage threshold met (80%+)"
      
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        continue-on-error: true  # Integration tests may not exist yet
      
      - name: Run HMM example
        run: |
          python examples/hmm_basic_usage.py
          echo "âœ… HMM example executed successfully"
      
      - name: Run Freqtrade integration example
        run: |
          python examples/freqtrade_integration_example.py
          echo "âœ… Freqtrade integration example executed successfully"

  build-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: pragma-trading-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm pragma-trading-bot:test python --version
          echo "âœ… Docker image built and tested successfully"

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Check for known vulnerabilities (safety)
        run: |
          safety check --json || true
          echo "âœ… Safety check completed"
        continue-on-error: true
      
      - name: Audit dependencies (pip-audit)
        run: |
          pip-audit --desc || true
          echo "âœ… Dependency audit completed"
        continue-on-error: true

  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser
      
      - name: Check documentation files
        run: |
          echo "Checking documentation structure..."
          ls -la docs/
          echo "âœ… Documentation files verified"
      
      - name: Validate markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'no'
        continue-on-error: true

  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build-docker, security-scan, docs-build]
    
    steps:
      - name: All checks passed
        run: |
          echo "================================================"
          echo "âœ… All CI/CD checks passed successfully!"
          echo "================================================"
          echo ""
          echo "Summary:"
          echo "  âœ… Code Quality & Linting"
          echo "  âœ… Unit Tests & Coverage"
          echo "  âœ… Integration Tests"
          echo "  âœ… Docker Build"
          echo "  âœ… Security Scan"
          echo "  âœ… Documentation"
          echo ""
          echo "Ready for merge! ðŸš€"
